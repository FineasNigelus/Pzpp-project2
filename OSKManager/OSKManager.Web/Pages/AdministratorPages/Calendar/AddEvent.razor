@inherits AdministratorAddEventBase 
@*@inject ICalendarEventsProvider eventsProvider*@
@using OSKManager.Web.Model
@using OSKManager.Web.Pages.AdministratorPages.Calendar 

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Blazor Calendar</title>
        <!-- Bootstrap -->
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css"
              integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous">

        <link href="css/app.css" rel="stylesheet" />

        <!-- Fluent UI Style -->
        <link rel="stylesheet" href="https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css" />
    </head>

<!-- Add Event -->
<div class="ms-depth-16 card">
    <EditForm model="model" OnValidSubmit="AddEventToSelectedDay">
        <div class="calendar-toolbar">
            <button class="toolbar-button" type="submit"><i class="ms-Icon ms-Icon--AddEvent"></i></button>
        </div>

        <div class="card-content">
            <div class="form-grop row">
                <div class="col-sm-10">
                    <InputSelect ValueExpression="@(()=>Category.ShortCategory)"
                                 Value="@Category.ShortCategory"
                                 ValueChanged="@((string value) => OnValueChanged(value))">
                        @foreach (var category in Categories)
                        { 
                            <option value=@category.ShortCategory>@category.ShortCategory</option>
                        }
                    </InputSelect>
                </div>
                @if (Category.ShortCategory != null)
                {
                    <div class="col-sm-10">
                        <InputSelectEnum @bind-Value="des.Season" />
                    </div>

                    @if (ListOfCourses != null)
                    {
                        <div class="col-sm-10">
                            <InputSelect ValueExpression="@(()=>Course.Name)"
                                         Value="@Course.Name"
                                         ValueChanged="@((string value) => OnValueChangedCourses(value))">
                                @foreach (var course in ListOfCourses)
                                {
                                    <option value="@course.Name">@course.Name</option>
                                }
                            </InputSelect>
                        </div>
                        @if (true)
                        {
                            <div class="col-sm-10">

                            </div>
                        }
                    }
                }

                @*<div class="col-sm-10">
                    <GuidInputSelect @bind-Value="Category.Id" class="form-control">
                        @foreach (var category in Categories)
                        {
                            <option value="@category.ShortCategory">@category.ShortCategory</option>
                        }
                    </GuidInputSelect>
                </div>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="Activity"
                                 @onchange="@((args) => MyProperty = args.Value.ToString())"
                                 class="form-control">
                        @foreach (var activity in Activities)
                        {
                            <option value="@activity">@activity</option>
                        }
                    </InputSelect>*@
                @*</div>*@
                @*@if (Activity == "Egzamin wewnętrzny" || Activity == "Wykład")
                {
                    <div class="">
                        @MyProperty
                    </div>
                }
                <div class="col-sm-10">
                    <select id="select-box" bind="@MyProperty">
                        @foreach (var course in Courses)
                        {
                            <option value="@course.Name">@course.Name.ToString()</option>
                        }
                    </select>
                </div>*@

                @*<InputSelectEnum @bind-Value="EnumCategory" />*@

                @*<span>Selected value 2: @EnumCategory</span>*@
                @*@if (Activity == "Egzamin wewnętrzny")
                {
                    <InputSelect @bind-Value="Student.Id">
                        @foreach (var student in Students)
                            {
                            <option value="@student.Id">@student.FirstName @student.LastName</option>
                            }
                    </InputSelect>
                }*@
            </div>
            
            <h3 class="ms-fontSize-24 ms-fontWeight-regular">@SelectedDay.Date.ToString("D") + "!" @MyProperty</h3>
            <input type="text" @bind-value="model.Subject" class="fluent-input" placeholder="Temat wydarzenia">
            <input type="time" @bind-value="model.StartDate" class="fluent-input" placeholder="Event Subject">
            <input type="time" @bind-value="model.EndDate" class="fluent-input" placeholder="Event Subject">
        </div>
    </EditForm>
</div>

@code{
    [Parameter]
    public CalendarDay SelectedDay { get; set; }

    private CalendarEvent model = new CalendarEvent();

    private async Task AddEventToSelectedDay()
    {
        // Convert the time to the a new date within the selected day
        model.StartDate = new DateTime(SelectedDay.Date.Year,
                                        SelectedDay.Date.Month,
                                        SelectedDay.Date.Day,
                                        model.StartDate.Hour,
                                        model.StartDate.Minute,
                                        0);

        model.EndDate = new DateTime(SelectedDay.Date.Year,
                                        SelectedDay.Date.Month,
                                        SelectedDay.Date.Day,
                                        model.EndDate.Hour,
                                        model.EndDate.Minute,
                                        0);

        if (SelectedDay.Events == null)
            SelectedDay.Events = new List<CalendarEvent>();

        var calendarEvent = new CalendarEvent
        {
            Subject = model.Subject,
            StartDate = model.StartDate,
            EndDate = model.EndDate
        };
        SelectedDay.Events.Add(calendarEvent);
        OnEventAdded.Invoke();
        // TODO: Push the event to the API
        //await eventsProvider.AddEventAsync(calendarEvent);

        Console.WriteLine($"Total Events in Day {SelectedDay.Events.Count} | {model.Subject} | {model.StartDate} | {model.EndDate}");

        model = new CalendarEvent();
    }

    public static event Action OnEventAdded = () => { };
}